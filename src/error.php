<?php
/*
Copyright (C) 2018 Pro Computer James R. Steel

This program is distributed WITHOUT ANY WARRANTY; without 
even the implied warranty of MERCHANTABILITY or FITNESS FOR 
A PARTICULAR PURPOSE. See the GNU General Public License 
for more details.
*/
/* 
    Created on  : Jan 01, 2016, 12:00:00 PM
    Organization: Pro Computer
    Author      : James R. Steel
    Description : Error storage class; stores error/exception information.
*/
namespace Procomputer\Pcclib;

/**
 * Error storage class; stores error/exception information.
 */
class Error {
    /* PHP predefined error constants (integer):
    1       E_ERROR             Fatal run-time errors. These indicate errors that can not be recovered from, such as a memory allocation problem. Execution of the script is halted.
    2       E_WARNING           Run-time warnings (non-fatal errors). Execution of the script is not halted.
    4       E_PARSE             Compile-time parse errors. Parse errors should only be generated by the parser.
    8       E_NOTICE            Run-time notices. Indicate that the script encountered something that could indicate an error, but could also happen in the normal course of running a script.
    16      E_CORE_ERROR        Fatal errors that occur during PHP's initial startup. This is like an E_ERROR, except it is generated by the core of PHP.
    32      E_CORE_WARNING      Warnings (non-fatal errors) that occur during PHP's initial startup. This is like an E_WARNING, except it is generated by the core of PHP.
    64      E_COMPILE_ERROR     Fatal compile-time errors. This is like an E_ERROR, except it is generated by the Zend Scripting Engine.
    128 	E_COMPILE_WARNING   Compile-time warnings (non-fatal errors). This is like an E_WARNING, except it is generated by the Zend Scripting Engine.
    256 	E_USER_ERROR        User-generated error message. This is like an E_ERROR, except it is generated in PHP code by using the PHP function trigger_error().
    512 	E_USER_WARNING      User-generated warning message. This is like an E_WARNING, except it is generated in PHP code by using the PHP function trigger_error().
    1024 	E_USER_NOTICE       User-generated notice message. This is like an E_NOTICE, except it is generated in PHP code by using the PHP function trigger_error().
    2048 	E_STRICT            Enable to have PHP suggest changes to your code which will ensure the best interoperability and forward compatibility of your code. 	Since PHP 5 but not included in E_ALL until PHP 5.4.0
    4096 	E_RECOVERABLE_ERROR Catchable fatal error. It indicates that a probably dangerous error occurred, but did not leave the Engine in an unstable state. If the error is not caught by a user defined handle (see also set_error_handler()), the application aborts as it was an E_ERROR. 	Since PHP 5.2.0
    8192 	E_DEPRECATED        Run-time notices. Enable this to receive warnings about code that will not work in future versions. 	Since PHP 5.3.0
    16384 	E_USER_DEPRECATED   User-generated warning message. This is like an E_DEPRECATED, except it is generated in PHP code by using the PHP function trigger_error(). 	Since PHP 5.3.0
    32767 	E_ALL               All errors and warnings, as supported, except of level E_STRICT prior to PHP 5.4.0. 	32767 in PHP 5.4.x, 30719 in PHP 5.3.x, 6143 in PHP 5.2.x, 2047 previously
    */

    const STATUS_NONE = 0;
    const STATUS_SUCCESS = 1;
    const STATUS_ERROR = 2;

    /**
     * The error source e.g. 'PHP Data Objects (PDO)'
     * @var string
     */
    protected $_source = 'PHP';

    /**
     * The error level - a PHP E_* constant
     * @var int
     */
    protected $_level = E_NOTICE;

    /**
     * The non-geeky explanation for the db error.
     * @var string
     */
    protected $_reason = '';

    /**
     * The error/message context e.g. 'database adapter connection'
     * @var string
     */
    protected $_context = '';

    /**
     * The message.
     * @var string
     */
    protected $_msg = '?';

    /**
     * The message code.
     * @var string
     */
    protected $_code = 0;

    /**
     * The file.
     * @var string
     */
    protected $_file = '';

    /**
     * The file line number.
     * @var string
     */
    protected $_line = '';

    /**
     * The exception trace array.
     * @var array
     */
    protected $_trace = [];

    /**
     * The exception trace string.
     * @var string
     */
    protected $_traceString = '';

    /**
     * The SQL State.
     * @var string
     */
    protected $_sqlState = '';

    /**
     *
     * @param \Exception|string $error     Error or message.
     * @param mixed             $code      (optional) Error code.
     * @param mixed             $sqlState  (optional) Error SQL State.
     */
    public function __construct($error, $code = null, $sqlState = null, $level = E_ERROR) {
        if(is_object($error)) {
            $methods = [
                'Message',
                'Code',
                'File',
                'Line',
                'Trace',
                'TraceAsString'
                ];
            foreach($methods as $name) {
                $meth = 'get' . $name;
                if(method_exists($error, $meth)) {
                    $set = 'set' . $name;
                    $this->$set($error->$meth());
                }
            }
        }
        else {
            $this->setMsg((string)$error);
        }
        
        if(null !== $code) {
            $this->setCode($code);
        }
        if(null !== $sqlState) {
            $this->setSqlState($sqlState);
        }
        $this->setLevel($level);
        
        if(is_string($this->_file) && strlen($f = trim($this->_file))) {
            $this->setContext('file: ' . basename($f));
        }
        
    }

    /**
     * Returns the error message and if specified the error code.
     * @return string
     */
    public function __toString() {
        return (empty($this->_code) ? '' : "Error {$this->_code}: ") . $this->_msg;
    }
    
    /**
     * Returns the error source e.g. 'PHP Data Objects (PDO)'
     *
     * @return string
     */
    public function getSource() {
        return $this->_source ;
    }

    /**
     * Sets the error source e.g. 'PHP Data Objects (PDO)'
     *
     * @param string $value
     *
     * @return Error
     */
    public function setSource($value) {
        $this->_source = (string)$value ;
        return $this ;
    }

    /**
     * Returns the error level - a PHP E_* constant
     *
     * @return int
     */
    public function getLevel() {
        return $this->_level ;
    }

    /**
     * Sets the error level - a PHP E_* constant
     *
     * @param int $value
     *
     * @return Error
     */
    public function setLevel($value) {
        $this->_level = (int)$value ;
        return $this ;
    }

    /**
     * Returns the non-geeky explanation for the db error.
     *
     * @return string
     */
    public function getReason() {
        return $this->_reason ;
    }

    /**
     * Sets the non-geeky explanation for the db error.
     *
     * @param string $value
     *
     * @return Error
     */
    public function setReason($value) {
        $this->_reason = (string)$value ;
        return $this ;
    }

    /**
     * Returns the error/message context.
     *
     * @return string
     */
    public function getContext() {
        return $this->_context ;
    }

    /**
     * Sets the error/message context e.g. 'database adapter connection '
     *
     * @param string $value
     *
     * @return Error
     */
    public function setContext($value) {
        $this->_context = (string)$value ;
        return $this ;
    }

    /**
     * Returns the message.
     *
     * @return string
     */
    public function getMsg() {
        return $this->_msg ;
    }

    /**
     * Sets the message.
     *
     * @param string $value
     *
     * @return Error
     */
    public function setMsg($value) {
        $this->_msg = (string)$value ;
        return $this ;
    }

    /**
     * Returns the message.
     *
     * @return string
     */
    public function getMessage() {
        return $this->_msg ;
    }

    /**
     * Sets the message.
     *
     * @param string $value
     *
     * @return Error
     */
    public function setMessage($value) {
        $this->_msg = (string)$value ;
        return $this ;
    }

    /**
     * Returns the message code.
     *
     * @return string
     */
    public function getCode() {
        return $this->_code ;
    }

    /**
     * Sets the message code.
     *
     * @param int $value
     *
     * @return Error
     */
    public function setCode($value) {
        $this->_code = $value ;
        return $this ;
    }

    /**
     * Returns the file.
     *
     * @return string
     */
    public function getFile() {
        return $this->_file ;
    }

    /**
     * Sets the file.
     *
     * @param string $value
     *
     * @return Error
     */
    public function setFile($value) {
        $this->_file = (string)$value ;
        return $this ;
    }

    /**
     * Returns the file line number.
     *
     * @return string
     */
    public function getLine() {
        return $this->_line ;
    }

    /**
     * Sets the file line number.
     *
     * @param string $value
     *
     * @return Error
     */
    public function setLine($value) {
        $this->_line = $value ;
        return $this ;
    }

    /**
     * Returns the exception trace.
     *
     * @return array
     */
    public function getTrace() {
        return $this->_trace ;
    }

    /**
     * Sets the exception trace.
     *
     * @param array $value
     *
     * @return Error
     */
    public function setTrace($value) {
        $this->_trace = $value ;
        return $this ;
    }

    /**
     * Returns the exception trace string.
     *
     * @return string
     */
    public function getTraceAsString() {
        return $this->_traceString ;
    }

    /**
     * Sets the exception trace string.
     *
     * @param string $value
     *
     * @return Error
     */
    public function setTraceAsString($value) {
        $this->_traceString = (string)$value ;
        return $this ;
    }

    /**
     * Returns the SQL State.
     *
     * @return mixed
     */
    public function getSqlState() {
        return $this->_sqlState ;
    }

    /**
     * Sets the SQL State.
     *
     * @param mixed $value
     *
     * @return Error
     */
    public function setSqlState($value) {
        $this->_sqlState = $value ;
        return $this ;
    }
}
